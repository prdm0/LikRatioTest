% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/likelihood_ratio_test .R
\name{mc}
\alias{mc}
\title{Simulações de Monte-Carlo para o teste da razão de verossimilhança generalizado.}
\usage{
mc(i, n, sig = 0.05, f, q, kicks, par0, ...)
}
\arguments{
\item{i}{Para uma única realização de um procedimento de Monte-Carlo, esse parâmetro não terá importância. Esse perâmetro será
utilizado em situações em que utiliza-se de um funcional para reproduzir a função \code{mc}.}

\item{n}{Tamanho da amostra a ser considerada.}

\item{sig}{Nível de significância adotado.}

\item{f}{Função densidade de probabilidade considerada no teste. Essa função deverá ser implementada conforme o exemplo abaixo.}

\item{q}{Função responsável pela geração de observações de uma variável aleatório com função densidade passada para \code{f}.}

\item{kicks}{Vetor com os chutes iniciais utilizados para a otimização.}

\item{par0}{Lista com dois elementos, sendo o primeiro um vetor com os nomes das variáveis que receberão valores fixos sob a
hipótese nula e o segundo elemendo é um outro vetor com os valores impostos às variáveis.}

\item{...}{Lista de argumetos que serão passados para a função passada à \code{q}.}
}
\value{
Retornará 0 (zero) se a estatística calculado não estiver acima do quantil da distribuição qui-quadrado e 1 (um),
caso contrário.
}
\description{
Realiza uma única iteração de um procedimento de Monte-Carlo para o teste da razão de verossimilhança generalizado. Dado um nível
de significância, será retornado 1 (um) se a estatística de teste está acima do quantil da distribuição qui-quadrado e 0 (zero),
caso contrário.
}
\details{
bla bla
}
\examples{
pdf_ew <- function(par, x, var = NULL){
 alpha <- par[1]
 sigma <- par[2]
 theta <- par[3]

 if (is.list(var)) eval(parse(text = paste(var[[1]], " <- ", unlist(var[[2]]), sep = "")))

 alpha * theta / sigma * (1 - exp(-(x / sigma) ^ alpha)) ^ (theta - 1) * exp(-(x / sigma) ^ alpha) * (x / sigma) ^ (alpha - 1)
}

rew <- function(n, alpha, sigma, theta){
 u <- runif(n, 0, 1)
 sigma * (-log(1 - u ^ (1 / theta))) ^ (1 / alpha)
}

set.seed(1L, kind = "L'Ecuyer-CMRG")

tictoc::tic()
rejeicao <- unlist(pbmcapply::pbmclapply(X = 1L:1e3L, FUN = mc,
                                        mc.cores = parallel::detectCores(), f = pdf_ew, q = rew,
                                        sig = 0.05, n = 100L, kicks = c(1, 1, 1),
                                        par0 = list("theta", 1),
                                        alpha = 1.7, sigma = 1.5, theta = 1))

# Proporção de rejeição ---------------------------------------------------
sum(rejeicao)/length(rejeicao)
tictoc::toc()
}
\author{
Pedro Rafael D. Marinho
}
