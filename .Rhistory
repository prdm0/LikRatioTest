getwd()
devtools::create()
devtools::create(getwd())
likelihood_ratio_test <- function(f, data, kicks, par0 = NULL, ...){
if (is.null(par0)) stop("Informar uma lista informando o parâmetro e o valor sob a hipótese nula.")
# Log-Likelihood under the null hypothesis. -----------------------------------
log_lik_h0 <- function(par, x){
-sum(log(f(par, x, var = par0)))
}
# Log-Likelihood under the null hypothesis. -----------------------------------
log_lik <- function(par, x){
-sum(log(f(par, x)))
}
myoptim <- function(...) tryCatch(expr = optim(...), error = function(e) NA)
par_h0 <- myoptim(par = kicks, fn = log_lik_h0, x = data, ...)
if(!is.list(par_h0) || par_h0$convergence != 0L) return(NA)
par_h <- myoptim(par = kicks, fn = log_lik, x = data, ...)
if(!is.list(par_h) || par_h$convergence != 0L) return(NA)
lambda <- 2 * (log_lik_h0(par = par_h0$par, x = data) - log_lik(par_h$par, x = data))
lambda[lambda < 0] <- 0
# Estatística de razão de verossimilhança:
lambda
}
# Simulação de Monte-Carlo ------------------------------------------------
mc <- function(i, n, sig = 0.05, f, q, kicks, par0, ...){
amostra <- q(n, ...)
result <- likelihood_ratio_test(f = f, data = amostra, kicks = kicks,
par0 = par0)
# Selecionando uma amostra que não gere erro nos chutes iniciais ----------
repeat{
amostra <- q(n, ...)
result <- likelihood_ratio_test(f = f, data = amostra, kicks = kicks,
par0 = par0)
if (!is.na(result)) break
}
q_teorico <- qchisq(p = 1 - sig, df = length(par0[[1]]))
ifelse(result > q_teorico, 1, 0) # Contando a rejeição.
}
# EW(alpha,theta,sigma) density function
fdp_w <- function(par, x, var = NULL){
alpha <- par[1]
beta <- par[2]
if (is.list(var)) eval(parse(text = paste(var[[1]], " <- ", unlist(var[[2]]), sep = "")))
dweibull(x, shape = alpha, scale = beta)
}
rw <- function(n = 1L, alpha, beta){
rweibull(n = n, shape = alpha, scale = beta)
}
fdp_ew <- function(par, x, var = NULL){
alpha <- par[1]
sigma <- par[2]
theta <- par[3]
if (is.list(var)) eval(parse(text = paste(var[[1]], " <- ", unlist(var[[2]]), sep = "")))
alpha * theta / sigma * (1 - exp(-(x / sigma) ^ alpha)) ^ (theta - 1) * exp(-(x / sigma) ^ alpha) * (x / sigma) ^ (alpha - 1)
}
rew <- function(n, alpha, sigma, theta){
u <- runif(n, 0, 1)
sigma * (-log(1 - u ^ (1 / theta))) ^ (1 / alpha)
}
set.seed(1L, kind = "L'Ecuyer-CMRG")
tictoc::tic()
rejeicao <- unlist(pbmcapply::pbmclapply(X = 1L:1e3L, FUN = mc,
mc.cores = parallel::detectCores(), f = fdp_w, q = rw,
sig = 0.05, n = 100L, kicks = c(1, 1, 1),
par0 = list("beta", 1.5),
alpha = 1.7, beta = 1.5))
# Proporção de rejeição ---------------------------------------------------
sum(rejeicao)/length(rejeicao)
tictoc::toc()
devtools::use_testthat()
library(devtools)
devtools::use_testthat()
devtools::uses_testthat()
library(testthat)
devtools::uses_testthat()
devtools::test()
devtools::load_all()
library(roxygen2)
roxygen2::roxygenise()
roxygen2::tag_name()
devtools::document()
devtools::document()
devtools::test()
devtools::test_file()
testthat::auto_test()
testthat::auto_test(getwd())
getwd()
devtools::document()
roxygen2::roxygenize()
roxygen2::roxygenize()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
fdp_w <- function(par, x, var = NULL){
alpha <- par[1]
beta <- par[2]
if (is.list(var)) eval(parse(text = paste(var[[1]], " <- ", unlist(var[[2]]), sep = "")))
dweibull(x, shape = alpha, scale = beta)
}
rw <- function(n = 1L, alpha, beta){
rweibull(n = n, shape = alpha, scale = beta)
}
data <- rw(n = 100L, alpha = 1, beta = 1)
likelihood_ratio_test(f = f_w, data = data, kicks = c(1, 1), par0 = list("beta", 1))
likelihood_ratio_test <- function(f, data, kicks, par0 = NULL, ...){
if (is.null(par0)) stop("Informar uma lista informando o parâmetro e o valor sob a hipótese nula.")
# Log-Likelihood under the null hypothesis. -----------------------------------
log_lik_h0 <- function(par, x){
-sum(log(f(par, x, var = par0)))
}
# Log-Likelihood under the null hypothesis. -----------------------------------
log_lik <- function(par, x){
-sum(log(f(par, x)))
}
myoptim <- function(...) tryCatch(expr = optim(...), error = function(e) NA)
par_h0 <- myoptim(par = kicks, fn = log_lik_h0, x = data, ...)
if(!is.list(par_h0) || par_h0$convergence != 0L) return(NA)
par_h <- myoptim(par = kicks, fn = log_lik, x = data, ...)
if(!is.list(par_h) || par_h$convergence != 0L) return(NA)
lambda <- 2 * (log_lik_h0(par = par_h0$par, x = data) - log_lik(par_h$par, x = data))
lambda[lambda < 0] <- 0
# Estatística de razão de verossimilhança:
lambda
}
fdp_w <- function(par, x, var = NULL){
alpha <- par[1]
beta <- par[2]
if (is.list(var)) eval(parse(text = paste(var[[1]], " <- ", unlist(var[[2]]), sep = "")))
dweibull(x, shape = alpha, scale = beta)
}
rw <- function(n = 1L, alpha, beta){
rweibull(n = n, shape = alpha, scale = beta)
}
data <- rw(n = 100L, alpha = 1, beta = 1)
likelihood_ratio_test(f = f_w, data = data, kicks = c(1, 1), par0 = list("beta", 1))
fdp_w <- function(par, x, var = NULL){
alpha <- par[1]
beta <- par[2]
if (is.list(var)) eval(parse(text = paste(var[[1]], " <- ", unlist(var[[2]]), sep = "")))
dweibull(x, shape = alpha, scale = beta)
}
rw <- function(n = 1L, alpha, beta){
rweibull(n = n, shape = alpha, scale = beta)
}
data <- rw(n = 100L, alpha = 1, beta = 1)
likelihood_ratio_test(f = f_w, data = data, kicks = c(0.5, 1), par0 = list("beta", 1))
fdp_w <- function(par, x, var = NULL){
alpha <- par[1]
beta <- par[2]
if (is.list(var)) eval(parse(text = paste(var[[1]], " <- ", unlist(var[[2]]), sep = "")))
dweibull(x, shape = alpha, scale = beta)
}
rw <- function(n = 1L, alpha, beta){
rweibull(n = n, shape = alpha, scale = beta)
}
data <- rw(n = 100L, alpha = 1, beta = 1)
likelihood_ratio_test(f = f_w, data = data, kicks = c(0.5, 1), par0 = list("beta", 1.2))
devtools::document()
fdp_w <- function(par, x, var = NULL){
alpha <- par[1]
beta <- par[2]
if (is.list(var)) eval(parse(text = paste(var[[1]], " <- ", unlist(var[[2]]), sep = "")))
dweibull(x, shape = alpha, scale = beta)
}
rw <- function(n = 1L, alpha, beta){
rweibull(n = n, shape = alpha, scale = beta)
}
data <- rw(n = 100L, alpha = 1, beta = 1)
likelihood_ratio_test(f = f_w, data = data, kicks = c(1, 1), par0 = list("beta", 1))
devtools::document()
devtools::document()
pdf_w <- function(par, x, var = NULL){
alpha <- par[1]
beta <- par[2]
if (is.list(var)) eval(parse(text = paste(var[[1]], " <- ", unlist(var[[2]]), sep = "")))
dweibull(x, shape = alpha, scale = beta)
}
rw <- function(n = 1L, alpha, beta){
rweibull(n = n, shape = alpha, scale = beta)
}
data <- rw(n = 100L, alpha = 1, beta = 1)
likelihood_ratio_test(f = pdf_w, data = data, kicks = c(1, 1), par0 = list("beta", 1))
devtools::document()
devtools::document()
fdp_ew <- function(par, x, var = NULL){
alpha <- par[1]
sigma <- par[2]
theta <- par[3]
if (is.list(var)) eval(parse(text = paste(var[[1]], " <- ", unlist(var[[2]]), sep = "")))
alpha * theta / sigma * (1 - exp(-(x / sigma) ^ alpha)) ^ (theta - 1) * exp(-(x / sigma) ^ alpha) * (x / sigma) ^ (alpha - 1)
}
rew <- function(n, alpha, sigma, theta){
u <- runif(n, 0, 1)
sigma * (-log(1 - u ^ (1 / theta))) ^ (1 / alpha)
}
set.seed(1L, kind = "L'Ecuyer-CMRG")
tictoc::tic()
rejeicao <- unlist(pbmcapply::pbmclapply(X = 1L:1e3L, FUN = mc,
mc.cores = parallel::detectCores(), f = fdp_w, q = rw,
sig = 0.05, n = 100L, kicks = c(1, 1, 1),
par0 = list("beta", 1.5),
alpha = 1.7, beta = 1.5))
# Proporção de rejeição ---------------------------------------------------
sum(rejeicao)/length(rejeicao)
tictoc::toc()
devtools::document()
devtools::document()
devtools::load_all()
devtools::use_testthat()
library(devtools)
library(testthat)
devtools::use_testthat()
devtools::test()
devtools::test()
devtools::test()
devtools::use_testthat()
testthat::test_example()
testthat::test_example(getwd())
testthat::test_path()
testthat::test_path()
devtools::test()
usethis::use_test("")
usethis::use_test("teste")
usethis::use_package("parallel")
usethis::use_package("purrr")
usethis::use_package("tictoc")
usethis::use_testthat()
devtools::test()
devtools::test()
usethis::use_testthat()
devtools::test()
devtools::create()
devtools::create("/home/pedro/Downloads/")
devtools::document()
devtools::install_github("prdm0/LikRatioTest")
library(LikRatioTest)
?mc
fdp_ew <- function(par, x, var = NULL){
alpha <- par[1]
sigma <- par[2]
theta <- par[3]
if (is.list(var)) eval(parse(text = paste(var[[1]], " <- ", unlist(var[[2]]), sep = "")))
alpha * theta / sigma * (1 - exp(-(x / sigma) ^ alpha)) ^ (theta - 1) * exp(-(x / sigma) ^ alpha) * (x / sigma) ^ (alpha - 1)
}
rew <- function(n, alpha, sigma, theta){
u <- runif(n, 0, 1)
sigma * (-log(1 - u ^ (1 / theta))) ^ (1 / alpha)
}
set.seed(1L, kind = "L'Ecuyer-CMRG")
tictoc::tic()
rejeicao <- unlist(pbmcapply::pbmclapply(X = 1L:1e3L, FUN = mc,
mc.cores = parallel::detectCores(), f = fdp_w, q = rw,
sig = 0.05, n = 100L, kicks = c(1, 1, 1),
par0 = list("beta", 1.5),
alpha = 1.7, beta = 1.5))
# Proporção de rejeição ---------------------------------------------------
sum(rejeicao)/length(rejeicao)
tictoc::toc()
rm(list=ls(all=TRUE))
fdp_ew <- function(par, x, var = NULL){
alpha <- par[1]
sigma <- par[2]
theta <- par[3]
if (is.list(var)) eval(parse(text = paste(var[[1]], " <- ", unlist(var[[2]]), sep = "")))
alpha * theta / sigma * (1 - exp(-(x / sigma) ^ alpha)) ^ (theta - 1) * exp(-(x / sigma) ^ alpha) * (x / sigma) ^ (alpha - 1)
}
rew <- function(n, alpha, sigma, theta){
u <- runif(n, 0, 1)
sigma * (-log(1 - u ^ (1 / theta))) ^ (1 / alpha)
}
set.seed(1L, kind = "L'Ecuyer-CMRG")
tictoc::tic()
rejeicao <- unlist(pbmcapply::pbmclapply(X = 1L:1e3L, FUN = mc,
mc.cores = parallel::detectCores(), f = fdp_w, q = rw,
sig = 0.05, n = 100L, kicks = c(1, 1, 1),
par0 = list("beta", 1.5),
alpha = 1.7, beta = 1.5))
# Proporção de rejeição ---------------------------------------------------
sum(rejeicao)/length(rejeicao)
tictoc::toc()
library(LikRatioTest)
fdp_ew <- function(par, x, var = NULL){
alpha <- par[1]
sigma <- par[2]
theta <- par[3]
if (is.list(var)) eval(parse(text = paste(var[[1]], " <- ", unlist(var[[2]]), sep = "")))
alpha * theta / sigma * (1 - exp(-(x / sigma) ^ alpha)) ^ (theta - 1) * exp(-(x / sigma) ^ alpha) * (x / sigma) ^ (alpha - 1)
}
rew <- function(n, alpha, sigma, theta){
u <- runif(n, 0, 1)
sigma * (-log(1 - u ^ (1 / theta))) ^ (1 / alpha)
}
set.seed(1L, kind = "L'Ecuyer-CMRG")
tictoc::tic()
rejeicao <- unlist(pbmcapply::pbmclapply(X = 1L:1e3L, FUN = mc,
mc.cores = parallel::detectCores(), f = fdp_w, q = rw,
sig = 0.05, n = 100L, kicks = c(1, 1, 1),
par0 = list("beta", 1.5),
alpha = 1.7, beta = 1.5))
library(pbmcapply)
devtools::document()
devtools::install_github("prdm0/LikRatioTest")
library(LikRatioTest)
usethis::use_testthat()
usethis::use_test()
usethis::use_test()
getwd()
usethis::use_test()
remove.packages("LikRatioTest", lib="~/R/x86_64-pc-linux-gnu-library/3.6")
usethis::use_test()
usethis::use_test("/home/pedro/Downloads/LikRatioTest/")
usethis::use_test("/home/pedro/Downloads/LikRatioTest/")
usethis::use_test("/home/pedro/Downloads/LikRatioTest/teste")
devtools::use_testthat()
usethis::use_testthat()
usethis::use_test()
usethis::use_test("test")
getwd()
usethis::use_testthat()
usethis::use_test("test")
usethis::use_test("test")
usethis::use_test("/home/pedro/Downloads/LikRatioTest/test")
usethis::use_test("test")
usethis::use_test("LikRatioTest")
usethis::use_test()
devtools::install_github("prdm0/LikRatioTest")
library(LikRatioTest)
help(package="LikRatioTest")
help(packages="LikRatioTest")
?mc
fdp_ew <- function(par, x, var = NULL){
alpha <- par[1]
sigma <- par[2]
theta <- par[3]
if (is.list(var)) eval(parse(text = paste(var[[1]], " <- ", unlist(var[[2]]), sep = "")))
alpha * theta / sigma * (1 - exp(-(x / sigma) ^ alpha)) ^ (theta - 1) * exp(-(x / sigma) ^ alpha) * (x / sigma) ^ (alpha - 1)
}
rew <- function(n, alpha, sigma, theta){
u <- runif(n, 0, 1)
sigma * (-log(1 - u ^ (1 / theta))) ^ (1 / alpha)
}
set.seed(1L, kind = "L'Ecuyer-CMRG")
tictoc::tic()
rejeicao <- unlist(pbmcapply::pbmclapply(X = 1L:1e3L, FUN = mc,
mc.cores = parallel::detectCores(), f = fdp_ew, q = rew,
sig = 0.05, n = 100L, kicks = c(1, 1, 1),
par0 = list("beta", 1.5),
alpha = 1.7, beta = 1.5))
# Proporção de rejeição ---------------------------------------------------
sum(rejeicao)/length(rejeicao)
tictoc::toc()
edit(mc)
